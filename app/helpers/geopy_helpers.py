from geopy.geocoders import Nominatim
from geopy.distance import geodesic
from geopy.point import Point
from ..constants import key_constants


class GeoHelper:
    """
    Geopy Helper
      - Where I setup geopy geolocator

    Attributes:
      geolocator(object): The object from the 3rd party api that has addresss searching
    """
    def __init__(self) -> None:
        """Class Initiator
        """
        self.geolocator = Nominatim(user_agent="my_email@myserver.com", timeout=10)
  
    def get_location(self, input_location: str) -> str:
        """Location Getter

        Args:
          input_location(str): The input address where I will get some metadata
        
        Returns:
          location(object): result generated by the geopy api. Contains address metadata
        """
        return self.__process_input_location(input_location)
  
    def get_distance(self, coordinates1, coordinates2):
        """Distance calculation from one point to another using coordinates

        Args:
          coordinates1(dict): Contains Latitude and longitude the be a point
          coordinates2(dict): Contains Latitude and longitude the be a point
        
        Returns:
          distance(float): Distance from fist point to secod point
        """
        point1 = Point(coordinates1[key_constants.LATITUDE], coordinates1[key_constants.LONGITUDE])
        point2 = Point(coordinates2[key_constants.LATITUDE], coordinates2[key_constants.LONGITUDE])
        distance = geodesic(point1, point2).kilometers

        return distance

    def __process_input_location(self, input_location: str):
        """Algorithm that will search an address in the given input even its not clear

        Args:
          input_location(str): Inputted location or address

        Returns:
          distance(float): Distance from fist point to secod point
        """
        delimiter = ',' if ',' in input_location else ' '
        location = self.geolocator.geocode(input_location, language='en', addressdetails=True)
        if not location and input_location:
          # divides the input and remove the first word to check if theres any address in it
          new_input = delimiter.join(input_location.split(delimiter)[1:]).strip()

          return self.__process_input_location(new_input) # recurse the new input for the same process
        else: 
          return location
